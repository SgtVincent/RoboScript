[
    {
        "context": "",
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle] ; # place all fruits on the table into the white plate.",
        "src_fs": {
            "check_object_on_receptacle": "def check_object_on_receptacle(object_name, receptacle):\n    # Object above has a larger z coordinate\n    return get_object_center_position(object_name)[2] > get_object_center_position(receptacle)[2]"
        },
        "code_str": "# Detailed planning:\n# Step 1: Identify all fruits on the table\n# Step 2: For each fruit on the table, grasp it and put it on the white plate\n\n# Identify all fruits on the table\nfruit_names = ['apple', 'banana']\nfruits_on_table = []\nfor fruit_name in fruit_names:\n    if check_object_on_receptacle(object_name=fruit_name, receptacle='table'):\n        fruits_on_table.append(fruit_name)\n\n# For each fruit on the table, grasp it and put it on the white plate\nfor fruit_name in fruits_on_table:\n    # Grasp the fruit\n    open_gripper()\n    grasp_pose = parse_adaptive_shape_grasp_pose(fruit_name)\n    grasp(grasp_pose)\n    close_gripper()\n    attach_object(fruit_name)\n\n    # Move the fruit to the white plate\n    place_pose = parse_place_pose(fruit_name, 'white_ceramic_plate')\n    move_to_pose(place_pose)\n\n    # Release the fruit\n    open_gripper()\n    detach_object(fruit_name)",
        "gvars": [
            "os",
            "rospy",
            "np",
            "Pose",
            "PoseStamped",
            "Point",
            "Quaternion",
            "move_group",
            "get_object_center_position",
            "get_object_pose",
            "get_3d_bbox",
            "get_object_name_list",
            "detect_objects",
            "get_object_joint_info",
            "parse_adaptive_shape_grasp_pose",
            "parse_horizontal_grasp_pose",
            "parse_place_pose",
            "get_gripper_pose",
            "open_gripper",
            "close_gripper",
            "attach_object",
            "detach_object",
            "move_to_pose",
            "follow_path",
            "grasp",
            "gripper_group",
            "objects",
            "check_object_on_receptacle"
        ],
        "lvars": []
    },
    {
        "context": "",
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle, cabinet.drawer_0, cabinet.drawer_1, cabinet.drawer_2, cabinet.handle_0, cabinet.handle_1, cabinet.handle_2] ; # open the second top cabinet drawer and place all boxes into it .",
        "src_fs": {
            "move_in_direction": "def move_in_direction(direction, distance=0.25):\n    # Get the current pose of the gripper\n    current_pose = get_gripper_pose()\n    \n    # Calculate the target pose\n    target_pose = Pose()\n    target_pose.position.x = current_pose.position.x + direction[0] * distance\n    target_pose.position.y = current_pose.position.y + direction[1] * distance\n    target_pose.position.z = current_pose.position.z + direction[2] * distance\n    target_pose.orientation = current_pose.orientation\n    \n    # Move the gripper to the target pose\n    move_to_pose(target_pose)"
        },
        "code_str": "# Detailed planning:\n# Step 1: Grasp the handle of the second top cabinet drawer\n# Step 2: Pull the handle of the second top cabinet drawer, move in +x direction\n# Step 3: Release the handle of the second top cabinet drawer\n# Step 4: Grasp the boxes one by one\n# Step 5: Move the boxes into the drawer\n# Step 6: Release the boxes\n\n# Grasp the handle of the second top cabinet drawer\nopen_gripper()\ngrasp_pose = parse_horizontal_grasp_pose('cabinet.handle_1')\ngrasp(grasp_pose)\nclose_gripper()\nattach_object('cabinet.handle_1')\n\n# Pull the handle of the second top cabinet drawer, move in +x direction\ndirection = [1, 0, 0] # (x, y, z)\nmove_in_direction(direction, distance=0.25)\n\n# Release the handle of the second top cabinet drawer\nopen_gripper()\ndetach_object('cabinet.handle_1')\n\n# Grasp the boxes one by one\nbox_names = ['white_and_pink_box', 'brown_box']\nfor box_name in box_names:\n    # Grasp the box\n    grasp_pose = parse_adaptive_shape_grasp_pose(box_name)\n    grasp(grasp_pose)\n    close_gripper()\n    attach_object(box_name)\n\n    # Move the box into the drawer\n    place_pose = parse_place_pose(box_name, 'cabinet.drawer_1')\n    move_to_pose(place_pose)\n\n    # Release the box\n    open_gripper()\n    detach_object(box_name)",
        "gvars": [
            "os",
            "rospy",
            "np",
            "Pose",
            "PoseStamped",
            "Point",
            "Quaternion",
            "move_group",
            "get_object_center_position",
            "get_object_pose",
            "get_3d_bbox",
            "get_object_name_list",
            "detect_objects",
            "get_object_joint_info",
            "parse_adaptive_shape_grasp_pose",
            "parse_horizontal_grasp_pose",
            "parse_place_pose",
            "get_gripper_pose",
            "open_gripper",
            "close_gripper",
            "attach_object",
            "detach_object",
            "move_to_pose",
            "follow_path",
            "grasp",
            "gripper_group",
            "objects",
            "move_in_direction"
        ],
        "lvars": []
    },
    {
        "context": "",
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle] ; # exchange the position of the apple and the banana on the table.",
        "src_fs": {},
        "code_str": "# Detailed planning:\n# Step 1: Grasp the apple\n# Step 2: Move the apple to a temporary location on the table\n# Step 3: Release the apple\n# Step 4: Grasp the banana\n# Step 5: Move the banana to the original location of the apple\n# Step 6: Release the banana\n# Step 7: Grasp the apple from the temporary location\n# Step 8: Move the apple to the original location of the banana\n# Step 9: Release the apple\n\n# Grasp the apple\nopen_gripper()\ngrasp_apple_pose = parse_adaptive_shape_grasp_pose(object_name='apple')\ngrasp(grasp_apple_pose)\nclose_gripper()\nattach_object('apple')\n\n# Move the apple to a temporary location on the table\napple_temp_place_pose = parse_place_pose(object_name='apple', receptacle_name='table', position=np.array([0.0, 0.0, 0.0]))\nmove_to_pose(apple_temp_place_pose)\n\n# Release the apple\nopen_gripper()\ndetach_object('apple')\n\n# Grasp the banana\ngrasp_banana_pose = parse_adaptive_shape_grasp_pose(object_name='banana')\ngrasp(grasp_banana_pose)\nclose_gripper()\nattach_object('banana')\n\n# Move the banana to the original location of the apple\nbanana_place_pose = parse_place_pose(object_name='banana', receptacle_name='table', position=get_object_center_position('apple'))\nmove_to_pose(banana_place_pose)\n\n# Release the banana\nopen_gripper()\ndetach_object('banana')\n\n# Grasp the apple from the temporary location\ngrasp_apple_pose = parse_adaptive_shape_grasp_pose(object_name='apple')\ngrasp(grasp_apple_pose)\nclose_gripper()\nattach_object('apple')\n\n# Move the apple to the original location of the banana\napple_place_pose = parse_place_pose(object_name='apple', receptacle_name='table', position=get_object_center_position('banana'))\nmove_to_pose(apple_place_pose)\n\n# Release the apple\nopen_gripper()\ndetach_object('apple')",
        "gvars": [
            "os",
            "rospy",
            "np",
            "Pose",
            "PoseStamped",
            "Point",
            "Quaternion",
            "move_group",
            "get_object_center_position",
            "get_object_pose",
            "get_3d_bbox",
            "get_object_name_list",
            "detect_objects",
            "get_object_joint_info",
            "parse_adaptive_shape_grasp_pose",
            "parse_horizontal_grasp_pose",
            "parse_place_pose",
            "get_gripper_pose",
            "open_gripper",
            "close_gripper",
            "attach_object",
            "detach_object",
            "move_to_pose",
            "follow_path",
            "grasp",
            "gripper_group",
            "objects"
        ],
        "lvars": []
    }
]