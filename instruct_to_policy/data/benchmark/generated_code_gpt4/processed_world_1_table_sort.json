[
    {
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle] ;  place all fruits on the table into the white plate.",
        "code": "# Detailed planning:\n# Step 1: Identify all fruits on the table\n# Step 2: For each fruit, grasp it, move it to the white plate, and release it\n\n# Identify all fruits on the table\nfruits_on_table = ['apple', 'banana']  # This is a placeholder. In a real scenario, we would use a function like identify_fruits_on_table()\n\nfor fruit in fruits_on_table:\n    # Grasp the fruit\n    open_gripper()\n    grasp_pose = parse_grasp_pose(object_name=fruit)\n    grasp(grasp_pose)\n    close_gripper()\n    attach_object(fruit)\n\n    # Move the fruit to the white plate\n    place_pose = parse_place_pose(object_name=fruit, receptacle_name='white_ceramic_plate')\n    move_to_pose(place_pose)\n\n    # Release the fruit\n    open_gripper()\n    detach_object(fruit)"
    },
    {
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle] ;  place all standing bottles into the table into the white plate.",
        "code": "# Detailed planning:\n# Step 1: Identify all standing bottles\n# Step 2: For each bottle, grasp it\n# Step 3: Move the bottle to the white plate\n# Step 4: Release the bottle\n\n# Identify all standing bottles\nstanding_bottles = [obj for obj in objects if 'bottle' in obj and 'standing' in parse_question(f\"What is the orientation of the {obj}?\")]\n\nfor bottle in standing_bottles:\n    # Grasp the bottle\n    open_gripper()\n    grasp_pose = parse_grasp_pose(object_name=bottle)\n    grasp(grasp_pose)\n    close_gripper()\n    attach_object(bottle)\n\n    # Move the bottle to the white plate\n    place_pose = parse_place_pose(object_name=bottle, receptacle_name='white_ceramic_plate')\n    move_to_pose(place_pose)\n\n    # Release the bottle\n    open_gripper()\n    detach_object(bottle)"
    },
    {
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle, cabinet.drawer0, cabinet.drawer1, cabinet.drawer2, cabinet.handle_0, cabinet.handle_1, cabinet.handle_2] ;  open the second top cabinet drawer and place all boxes into it .",
        "code": "def get_current_position():\n    current_pose = get_gripper_pose()\n    current_position = [current_pose.position.x, current_pose.position.y, current_pose.position.z]\n    return current_position\ndef get_current_pose():\n    return move_group.get_current_pose().pose\ndef move_to_position(new_position):\n    current_pose = get_current_pose()\n    target_pose = Pose()\n    target_pose.position.x = new_position[0]\n    target_pose.position.y = new_position[1]\n    target_pose.position.z = new_position[2]\n    target_pose.orientation = current_pose.orientation\n    move_to_pose(target_pose)\ndef move_in_direction(direction, distance=0.2):\n    # Get the current position\n    current_position = get_current_position()\n    \n    # Calculate the new position by adding the direction times the distance to the current position\n    new_position = current_position + direction * distance\n    \n    # Move to the new position\n    move_to_position(new_position)\n# Detailed planning:\n# Step 1: Open the second top cabinet drawer\n# Step 2: Identify all boxes in the scene\n# Step 3: For each box, grasp it and place it into the drawer\n# Step 4: Close the drawer\n\n# Open the second top cabinet drawer\nopen_gripper()\ngrasp_pose = parse_grasp_pose('cabinet.handle_1')\ngrasp(grasp_pose)\nclose_gripper()\nattach_object('cabinet.handle_1')\n\n# Pull the drawer handle, move in +x direction\ndirection = [1, 0, 0] # (x, y, z)\nmove_in_direction(direction, distance=0.2)\n\n# Release the drawer\nopen_gripper()\ndetach_object('cabinet.handle_1')\n\n# Identify all boxes in the scene\nbox_names = [name for name in get_obj_name_list() if 'box' in name]\n\n# For each box, grasp it and place it into the drawer\nfor box_name in box_names:\n    # Grasp the box\n    grasp_pose = parse_grasp_pose(box_name)\n    grasp(grasp_pose)\n    close_gripper()\n    attach_object(box_name)\n\n    # Place the box into the drawer\n    place_pose = parse_place_pose(box_name, 'cabinet.drawer1')\n    move_to_pose(place_pose)\n\n    # Release the box\n    open_gripper()\n    detach_object(box_name)\n\n# Close the drawer\ngrasp_pose = parse_grasp_pose('cabinet.handle_1')\ngrasp(grasp_pose)\nclose_gripper()\nattach_object('cabinet.handle_1')\n\n# Push the drawer handle, move in -x direction\ndirection = [-1, 0, 0] # (x, y, z)\nmove_in_direction(direction, distance=0.2)\n\n# Release the drawer\nopen_gripper()\ndetach_object('cabinet.handle_1')"
    },
    {
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle] ;  stand up lying bottles and mugs on the table.",
        "code": "# Detailed planning:\n# Step 1: Get the list of objects on the table\n# Step 2: For each object, check if it is a bottle or a mug\n# Step 3: If it is a bottle or a mug, check if it is lying down\n# Step 4: If it is lying down, grasp it and stand it up\n\n# Get the list of objects on the table\nobjects_on_table = get_obj_name_list()\n\n# For each object, check if it is a bottle or a mug\nfor object_name in objects_on_table:\n    if 'bottle' in object_name or 'mug' in object_name:\n        # If it is a bottle or a mug, check if it is lying down\n        bbox = get_3d_bbox(object_name)\n        if bbox[2] < bbox[5]:  # If the z_min is less than z_max, the object is lying down\n            # If it is lying down, grasp it and stand it up\n            grasp_pose = parse_grasp_pose(object_name)\n            open_gripper()\n            grasp(grasp_pose)\n            close_gripper()\n            attach_object(object_name)\n            \n            # Calculate the position to stand the object up\n            position = get_object_center_position(object_name)\n            position[2] = bbox[5]  # Set the z position to the z_max of the bounding box\n            \n            # Move the object to the calculated position\n            place_pose = parse_place_pose(object_name, position=position)\n            move_to_pose(place_pose)\n            \n            # Release the object\n            open_gripper()\n            detach_object(object_name)\n            \n            # Wait for environment to be static and detect objects new states\n            rospy.sleep(5)\n            detect_objects()"
    },
    {
        "query": "# objects = [table, cabinet, apple, banana, white_ceramic_plate, white_and_pink_box, brown_box, brown_medication_bottle, bleach_cleanser, red_plastic_bowl, mustard_bottle] ;  exchange the position of the apple and the banana on the table.",
        "code": "# Detailed planning:\n# Step 1: Grasp the apple\n# Step 2: Move the apple to a temporary location on the table\n# Step 3: Release the apple\n# Step 4: Wait for environment to be static and detect objects new states\n# Step 5: Grasp the banana\n# Step 6: Move the banana to the original location of the apple\n# Step 7: Release the banana\n# Step 8: Wait for environment to be static and detect objects new states\n# Step 9: Grasp the apple from the temporary location\n# Step 10: Move the apple to the original location of the banana\n# Step 11: Release the apple\n\n# Grasp the apple\napple_grasp_pose = parse_grasp_pose(object_name='apple')\nopen_gripper()\ngrasp(apple_grasp_pose)\nclose_gripper()\nattach_object('apple')\n\n# Move the apple to a temporary location on the table\napple_temp_place_pose = parse_place_pose(object_name='apple', receptacle_name='table', position=[0.5, 0.5, 0.1])\nmove_to_pose(apple_temp_place_pose)\n\n# Release the apple\nopen_gripper()\ndetach_object('apple')\n\n# Wait for environment to be static and detect objects new states\nrospy.sleep(5)\ndetect_objects()\n\n# Grasp the banana\nbanana_grasp_pose = parse_grasp_pose(object_name='banana')\ngrasp(banana_grasp_pose)\nclose_gripper()\nattach_object('banana')\n\n# Move the banana to the original location of the apple\nbanana_place_pose = parse_place_pose(object_name='banana', position=apple_grasp_pose.position)\nmove_to_pose(banana_place_pose)\n\n# Release the banana\nopen_gripper()\ndetach_object('banana')\n\n# Wait for environment to be static and detect objects new states\nrospy.sleep(5)\ndetect_objects()\n\n# Grasp the apple from the temporary location\napple_grasp_pose = parse_grasp_pose(object_name='apple')\ngrasp(apple_grasp_pose)\nclose_gripper()\nattach_object('apple')\n\n# Move the apple to the original location of the banana\napple_place_pose = parse_place_pose(object_name='apple', position=banana_grasp_pose.position)\nmove_to_pose(apple_place_pose)\n\n# Release the apple\nopen_gripper()\ndetach_object('apple')"
    }
]