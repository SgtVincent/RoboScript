"""
This script is used to check the grammar of the code generated by chatgpt.
"""
import os
import sys
import numpy as np
import json
import argparse

# add parent directory to path to import src folder
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils import exec_safe

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--processed_file", type=str, default="data/generated_code/processed_table_cabinet_0.json",
        help=r"File of processed {query: code} pairs to check"
    )
    parser.add_argument(
        "--raw_file", type=str, default="data/generated_code/raw_table_cabinet_0.json",
        help="File of raw code generation result, used for importing pre-defined variables"
    )

    args = parser.parse_args()
    return args

def compose_wrapped_code_str(code_str, vars):
    """
    Wrap code_str with a function definition and call it with vars. This is used to check the grammar of the code.
    """
    # add four-space indent for each line in code_str
    code_str_indented = '\n'.join(['    ' + line for line in code_str.split('\n')])

    wrapped_code_str = f"""
def dummy_func({", ".join(vars)}):
{code_str_indented}
    return locals()
    """ 
    return wrapped_code_str

def check_code_grammar(args):
    """
    Check the grammar of the code generated by chatgpt.
    """
    processed_file, raw_file = args.processed_file, args.raw_file
    with open(processed_file, 'r') as f:
        processed_data = json.load(f)
    with open(raw_file, 'r') as f:
        raw_data = json.load(f)
    
    # check the grammar of the code
    for i, data in enumerate(processed_data):
        query = data['query']
        code_str = data['code']
        vars = raw_data[i]['gvars'] + raw_data[i]['lvars']

        # wrap code_str with a function definition and call it with vars
        wrapped_code_str = compose_wrapped_code_str(code_str, vars)

        # check the grammar of the code
        # Note: Since the vars are dummy, we do not really execute the code, we just check the grammar of the code
        try:
            exec_safe(wrapped_code_str, gvars=None, lvars=None)
        except Exception as e:
            print(f"Error in query: {query}")
            print(f"Error message: {e}")
            print("=========================================")
            # print(f"Code: \n{code_str}")
            print(f"Wrapped code: \n{wrapped_code_str}")
            print("=========================================")

if __name__ == "__main__":
    args = parse_args()
    check_code_grammar(args)